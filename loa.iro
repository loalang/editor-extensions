# Loa Syntax Highlighter using the Iro format

name                                               = loa
file_extensions []                                 = loa;
background_color                                   = white
color                                              = black

contexts [] {
  main : context {

    : pattern {
      regex                                       \= \b(namespace|import|export|as|class|self|is|abstract|static|let|async|await)\b
      styles[]                                     = .keyword;
    }
    
    : pattern {
      regex         \= \b((public|private)\s+var)\b
      styles[]       = .keyword;
    }
    
    : inline_push {
      regex         \= \b((public|private)(\s+(init|static|abstract))?)\b
      styles[]       = .keyword;
      default_style  = .punctuation
      
      : pop {
        regex                                     \= ([a-z][A-Za-z._]*'*:?)
        styles[]                                   = .message;
      }
    }

    : pattern {
      regex                                       \= ([A-Z][A-Za-z._]*'*)
      styles[]                                     = .type;
    }

    : pattern {
      regex                                       \= ([a-z][A-Za-z._]*'*:)
      styles[]                                     = .message;
    }

    : pattern {
      regex                                       \= ([a-z][A-Za-z._]*'*)
      styles[]                                     = .symbol;
    }

    : pattern {
      regex                                       \= ([0-9]+(#[0-9a-zA-Z]+)*)
      styles[]                                     = .number;
    }
    
    : inline_push {
      regex \= (")
      styles[] = .string;
      default_style = .string
      
      : pop {
        regex \= (")
        styles[] = .string;
      }
    }

    : pattern {
      regex                                       \= ('(\\.|[^'])')
      styles[]                                     = .string;
    }

    : pattern {
      regex                                       \= (//$)
      styles[]                                     = .comment;
    }
    : inline_push {
      regex                                       \= (//)
      styles []                                    = .comment;
      : pop {
        regex                                     \= (.$)
        styles []                                  = .comment;
      }
      : include "todo";
      : pattern {
        regex                                     \= ([\S\s])
        styles[]                                   = .comment;
      }
    }
    : include "multi_line_comment";
    : pattern {
      regex                                       \= ([\S\s])
      styles[]                                     = .punctuation;
    }
  }

  multi_line_comment : context {
    description                                    = multiline
    : inline_push {
      regex                                       \= (/\*)
      styles []                                    = .comment;
      : pop {
        regex                                     \= (\*/)
        styles []                                  = .comment;
      }
      : include "nested_multi_line_comment";
    }
    : include "todo";
  }

  nested_multi_line_comment : context {
    description                                    = multiline
    : inline_push {
      regex                                       \= (/\*)
      styles []                                    = .comment;
      : pop {
        regex                                     \= (\*/)
        styles []                                  = .comment;
      }
      : include "nested_multi_line_comment";
    }
    : include "todo";
    : pattern {
      regex                                       \= ([\S\s])
      styles[]                                     = .comment;
    }
  }

  todo : context {
    : pattern {
      regex                                       \= (TODO)
      styles[]                                     = .todo;
    }
  }
}

styles [] {
  .keyword : style {
    color                 = #0066FF
    ace_scope             = keyword
    textmate_scope        = keyword
    pygments_scope        = Keyword
  }
  .string : style {
    color                 = #00AA66
    ace_scope             = string
    textmate_scope        = string
    pygments_scope        = String
  }
  .number : style {
    color                 = #00AA66
    ace_scope             = number
    textmate_scope        = constant.numeric
    pygments_scope        = Number
  }
  .message : style {
    color                 = #7700DD
    ace_scope             = number
    textmate_scope        = entity.name.atom
    pygments_scope        = Number
  }
  .type : style {
    color                 = #F53161
    ace_scope             = type
    textmate_scope        = support.type
    pygments_scope        = Keyword.Type
  }
  .symbol : style {
    ace_scope             = name
    textmate_scope        = entity.name.function
    pygments_scope        = Name
  }
  .punctuation : style {
    color                 = #999999
    ace_scope             = punct
    textmate_scope        = punct
    pygments_scope        = Punctuation
  }
  .comment : style {
    color                 = grey
    italic                = true
    ace_scope             = comment
    textmate_scope        = comment
    pygments_scope        = Comment
  }
  .todo : style {
    color                 = black
    bold                  = true
    italic                = true
    ace_scope             = todo
    textmate_scope        = todo
    pygments_scope        = Name.Builtin
  }
}
